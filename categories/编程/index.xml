<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on Trim21&#39;s</title>
    <link>https://blog.trim21.me/categories/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on Trim21&#39;s</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Mar 2025 05:55:21 +0800</lastBuildDate>
    <atom:link href="https://blog.trim21.me/categories/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>caddy在内网中无法更新证书</title>
      <link>https://blog.trim21.me/posts/caddy-not-working-in-nat/</link>
      <pubDate>Mon, 23 Dec 2019 15:31:10 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/caddy-not-working-in-nat/</guid>
      <description>&lt;p&gt;NAS 上面运行了一个 caddy 服务器，还设置了 https。最近突然遇到了证书过期的问题.&lt;/p&gt;&#xA;&lt;p&gt;检查 log 发现是证书申请失败 &lt;code&gt;SERVFAIL for _acme-challenge.my_domain.&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;大概搜索了一下, 是因为路由器的 dnsmasq 过滤掉了完成验证需要的 dns 查询&lt;/p&gt;&#xA;&lt;p&gt;只要在 dnsmasq 设置中把 filterwin2k 参数禁用即可, 不同版本的 dnsmasq 禁用方法有些不同&lt;/p&gt;</description>
    </item>
    <item>
      <title>给win10应用商店设置代理</title>
      <link>https://blog.trim21.me/posts/set-proxy-for-win10-store/</link>
      <pubDate>Wed, 26 Jun 2019 21:32:31 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/set-proxy-for-win10-store/</guid>
      <description>&lt;p&gt;最近网络状况实在是不好,用 win10 应用商店下载应用怎么也不成功.修改系统代理也不管用.&#xA;参照&lt;a href=&#34;https://sspai.com/post/41137&#34;&gt;少数派的这篇文章&lt;/a&gt;设置了代理,总算是解决了问题.&lt;/p&gt;&#xA;&lt;p&gt;其中,最麻烦的是找到对应 uwp 应用的 sid,因为是要在表里一项一项的去找.&lt;/p&gt;&#xA;&lt;p&gt;win10 商店对应的应用在注册表中的&lt;code&gt;DisplayName&lt;/code&gt;是&lt;code&gt;Microsoft.WindowsStore&lt;/code&gt;,&#xA;所以遍历&lt;code&gt;HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Mappings&lt;/code&gt;的所有子 key,找到对应&lt;code&gt;DisplayName&lt;/code&gt;中包含&lt;code&gt;Microsoft.WindowsStore&lt;/code&gt;的一项就可以了.&lt;/p&gt;&#xA;&lt;p&gt;因为手动一项一项的去找效率实在是太低,就直接写了个 python 脚本来遍历.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; winreg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iterkeys&lt;/span&gt;(key):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 获取该键的所有子键，因为没有方法可以获取子键的个数，所以只能用这种方法进行遍历&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# EnumValue方法用来枚举键值，EnumKey用来枚举子键&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; winreg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;EnumKey(key, i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WindowsError&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;itervalues&lt;/span&gt;(key):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 获取该键的所有键值，因为没有方法可以获取键值的个数，所以只能用这种方法进行遍历&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    d &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;# EnumValue方法用来枚举键值，EnumKey用来枚举子键&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            name, value, _ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; winreg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;EnumValue(key, i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            d[name] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WindowsError&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; d&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    base_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Software\Classes\Local Settings\Software&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\Microsoft\Windows\CurrentVersion\AppContainer\Mappings&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mappings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; winreg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OpenKey(winreg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HKEY_CURRENT_USER, base_key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; iterkeys(mappings):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; winreg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OpenKey(winreg&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;HKEY_CURRENT_USER, base_key &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; itervalues(k)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;WindowsStore&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DisplayName&amp;#39;&lt;/span&gt;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(info[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DisplayName&amp;#39;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;直接保存成 py 文件,然后运行,控制台的第二行会输出类似&lt;code&gt;S-1-15-2-****&lt;/code&gt;的一个 SID,就是在&lt;code&gt;CheckNetIsolation.exe loopbackexempt -a -p=${SID}&lt;/code&gt;中要用到的 SID.&lt;/p&gt;</description>
    </item>
    <item>
      <title>用PyInstaller打包python应用</title>
      <link>https://blog.trim21.me/posts/build-python-package-with-pyinstaller/</link>
      <pubDate>Sun, 02 Jun 2019 23:47:34 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/build-python-package-with-pyinstaller/</guid>
      <description>&lt;p&gt;那天突然好奇，&lt;code&gt;docker-compose&lt;/code&gt;是用什么语言写的。然后一看，发现居然是用 python2 写的。&lt;/p&gt;&#xA;&lt;p&gt;但想到我安装的时候从来没在乎过机器上有没有安装 python，或者我的 python 版本是多少，而是按照官网的文档，直接下载一个二进制文件来安装的。突然眼前一亮。看了一下对应的构建代码，发现他是用&lt;a href=&#34;https://github.com/pyinstaller/pyinstaller&#34;&gt;&lt;code&gt;PyInstaller&lt;/code&gt;&lt;/a&gt;来进行打包的，把一个 python 应用打包成单个的二进制文件。&lt;/p&gt;&#xA;&lt;p&gt;一般来说，正常的 python 包的分发会基于 pip 的，发布到 pypi 和用户下载的都是代码文件（和其他语言编译的二进制文件），如果依赖于其他的 package 会在安装的时候再进行下载。&lt;/p&gt;&#xA;&lt;p&gt;但用&lt;code&gt;PyInstaller&lt;/code&gt;，打包出来的可执行文件中包含了所有用到的依赖和 python 解释器，并不需要本机安装了 python 或者 pip，像 docker-compose 这样的工具，打包之后成一个单文件，对于用户在安装和使用的时候都会方便许多，而对于我们开发者来说，就不用考虑兼容旧的 python 版本，可以直接使用 python3.6 的新语法如 type annotation 等，使用某些只有 python3.6 以上版本才能用的依赖库，自然也比原来爽了许多。&lt;/p&gt;&#xA;&lt;p&gt;首先，PyInstaller 的工作原理是从一个 py 文件出发在静态分析出所有用到的依赖，然后把所有的依赖打包起来，在用户使用二进制的时候释放到一个临时文件夹中，用 Python 解释器来运行。&lt;/p&gt;&#xA;&lt;p&gt;PyInstaller 入门的文章已经有很多了，就不再重复写一遍了，主要遇到的坑有这么几个。&lt;/p&gt;&#xA;&lt;h2 id=&#34;用到的非-py-文件要手动指定路径一起打包&#34;&gt;用到的非 py 文件要手动指定路径一起打包&lt;/h2&gt;&#xA;&lt;p&gt;我的程序中用到了一些模板文件，是在程序运行起来之后才根据需要加载决定是否渲染的。这些文件因为不是 python 文件，所以 PyInstaller 在分析的时候也不会知道是程序的一部分，就不会打包在二进制中。&lt;/p&gt;&#xA;&lt;p&gt;在程序运行的时候，如果用到了对应的文件，因为没有被打包进来的缘故，程序就会报错。&lt;/p&gt;&#xA;&lt;p&gt;如果用命令行来指定要一起打包的文件效率过低，所以可以编写一个 spec 文件来告诉 PyInstaller 要如何打包。&lt;/p&gt;&#xA;&lt;p&gt;（这是我之前尝试打包我的程序是用到的 spec 文件，但是因为不支持&lt;code&gt;entry_points&lt;/code&gt;的原因，所以我最后放弃了使用这个办法，但是打包出来的程序在不用到&lt;code&gt;entry_points&lt;/code&gt;的情况下是跟直接使用 pip 安装行为一致的。）&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;bgmi.spec&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# -*- mode: python -*-&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyInstaller.building.api &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; EXE, PYZ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; PyInstaller.building.build_main &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Analysis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os.path&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; importlib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bindata_dir &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bgmi/front/templates&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bgmi/lib/models/migrations&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_bindata&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; dir_path &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; bindata_dir:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; file &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(dir_path):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; (os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dir_path, file), dir_path)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;block_cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package_imports &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;peewee_migrate&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;template.txt&amp;#39;&lt;/span&gt;]]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datas &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(get_bindata())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; package, files &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; package_imports:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    proot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(importlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;import_module(package)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__file__)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    datas&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend((os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(proot, f), package) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; files)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Analysis([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bgmi/__main__.py&amp;#39;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             pathex&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             hiddenimports&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             hookspath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             datas&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;datas,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             runtime_hooks&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             cipher&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;block_cipher)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pyz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PYZ(a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pure, cipher&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;block_cipher)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; EXE(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pyz,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scripts,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binaries,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;zipfiles,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datas,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bgmi&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    strip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    upx&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bootloader_ignore_signals&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;a = Analysis([&#39;bgmi/__main__.py&#39;],&lt;/code&gt;为程序的入口就是原本如果使用命令行的话，在 PyInstaller 后面跟的那个 py 文件路径。&lt;/p&gt;</description>
    </item>
    <item>
      <title>参与python文档的中文翻译</title>
      <link>https://blog.trim21.me/posts/join-python-zh-cn-translaters/</link>
      <pubDate>Sun, 31 Mar 2019 01:28:36 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/join-python-zh-cn-translaters/</guid>
      <description>&lt;p&gt;今天看到这个帖子&lt;a href=&#34;https://www.v2ex.com/t/550164&#34;&gt;别开心太早， Python 官方文档的翻译差远了 - V2EX&lt;/a&gt; 发现参与 python 文档翻译的门槛还挺低的，就尝试了一下翻译了两段文档.&lt;/p&gt;&#xA;&lt;h2 id=&#34;参与翻译的方法&#34;&gt;参与翻译的方法&lt;/h2&gt;&#xA;&lt;p&gt;按照 &lt;a href=&#34;https://www.python.org/dev/peps/pep-0545/&#34;&gt;pep-545&lt;/a&gt;的说法, 有三步需要做:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;注册一个 &lt;a href=&#34;https://bugs.python.org&#34;&gt;https://bugs.python.org&lt;/a&gt; 的账号, 这个用户名在签 license 的时候会用到.&lt;/li&gt;&#xA;&lt;li&gt;签 license &lt;a href=&#34;https://www.python.org/psf/contrib/&#34;&gt;介绍&lt;/a&gt; 具体签署是在&lt;a href=&#34;https://www.python.org/psf/contrib/contrib-form/&#34;&gt;这个页面上&lt;/a&gt; 用的 adobe sign, 填完那个 iframe 里面的几个框就能提交了.&lt;/li&gt;&#xA;&lt;li&gt;注册 transifex, 选择自己的语言, 并且&lt;a href=&#34;https://www.transifex.com/python-doc/python-newest/&#34;&gt;申请加入&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;然后等待被允许加入团队, 然后就可以开始翻译了.&lt;/p&gt;&#xA;&lt;p&gt;翻译是以每段为单位进行的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.trim21.me/static/bd69bf14ly1g1l2x2j9x2j20yh0po7fd.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/python/python-docs-zh-cn&#34;&gt;python/python-docs-zh-cn: zh_CN translation of the Python documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;中文的 po 文件在这个仓库里, 每个小时会有一个 bot 会自动把 transifex 上面的翻译同步到仓库里面去, 但是自己的名字并不会出现在这个仓库的 contributors 里面, 233&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于asyncio的web框架aiohttp</title>
      <link>https://blog.trim21.me/posts/python-aiohttp/</link>
      <pubDate>Fri, 05 Oct 2018 17:42:21 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/python-aiohttp/</guid>
      <description>&lt;p&gt;本来想扯一通标准库里添加了&lt;code&gt;asyncio&lt;/code&gt;的意义, 什么统一了异步框架, 什么方便代码前移之类的了.&#xA;然后发现原来大家也都是用装饰器+生成器来写的, 好像也没啥区别&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;迁移的主要阻力也不是各个框架实现异步的方式不同, 而是用到了框架的某些特性, 在其他框架里可能没有, &lt;code&gt;asyncio&lt;/code&gt;成为标准库也改变不了这一点.&lt;/p&gt;&#xA;&lt;p&gt;不过 python3.4 3.5 3.6 添加了很多新功能,语言层面的异步支持越来越好了&lt;/p&gt;&#xA;&lt;p&gt;在 3.4 就是上面说的, 引入了&lt;code&gt;asyncio&lt;/code&gt;的标准库.&lt;/p&gt;&#xA;&lt;p&gt;3.5 有了一系列的 bug fix ,可以见&lt;a href=&#34;https://aiohttp.readthedocs.io/en/stable/faq.html#why-is-python-3-5-3-the-lowest-supported-version&#34;&gt;why-is-python-3-5-3-the-lowest-supported-version&lt;/a&gt;, 还支持了&lt;code&gt;async/await&lt;/code&gt;语法.&lt;/p&gt;&#xA;&lt;p&gt;不过 3.5 的时候&lt;code&gt;async/await&lt;/code&gt;还不是关键字, 还可以给&lt;code&gt;async&lt;/code&gt;赋值, 所以到了 python3.7 的时候挂了一堆库, 因为他们用了&lt;code&gt;async&lt;/code&gt;当变量&amp;hellip;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; asyncio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;version_info) &lt;span style=&#34;color:#75715e&#34;&gt;# 3.5.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 异步调用asyncio.sleep(1):&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello again!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取EventLoop:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_event_loop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 执行coroutine&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run_until_complete(hello())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;会输出&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello world!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello again!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是如果到了 python3.7, 会报错&lt;code&gt;SyntaxError&lt;/code&gt;, 也因为这个原因挂了一堆库.&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用webpack打包userscript</title>
      <link>https://blog.trim21.me/posts/webpack-userscript/</link>
      <pubDate>Wed, 03 Oct 2018 11:15:35 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/webpack-userscript/</guid>
      <description>&lt;p&gt;原本用的是 grunt 来打包 webpack, 但是 grunt 只是依赖于简单的字符串替换和拼接, 效率过低.&lt;/p&gt;&#xA;&lt;p&gt;既然 webpack 可以用来打包别的 js 文件, 那么打包一个 userscript 肯定也没什么问题, 甚至大材小用了.&lt;/p&gt;&#xA;&lt;p&gt;所以自己写了一个模板&lt;a href=&#34;https://github.com/Trim21/webpack-userscript-template&#34;&gt;webpack-userscript-template&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;因为找了一下, 发现相应的工具还是有些缺陷的.&lt;/p&gt;&#xA;&lt;p&gt;主要有两个问题:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生成 userscript 的 meta 注释&lt;/li&gt;&#xA;&lt;li&gt;没有一个好用的 http client 库.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;所以为了自己写 userscript 爽一点, 写了两个库解决了这个问题.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Trim21/userscript-metadata-webpack-plugin&#34;&gt;userscript-metadata-webpack-plugin&lt;/a&gt;用来解决生成 meta 的问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Trim21/axios-userscript-adapter&#34;&gt;axios-userscript-adapter&lt;/a&gt;是 axios 的一个 adapter, 用来解决进行 http 请求的问题.&lt;/p&gt;&#xA;&lt;p&gt;本来 github 上是有一个 webpack-userscript 项目的, 但是里面不知道为什么, 打包用到的是 bash, 理解不了&amp;hellip;就自己写了一个&lt;a href=&#34;https://github.com/Trim21/webpack-userscript-template&#34;&gt;webpack-userscript-template&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用 axios 的时候不要忘了加入 connect 的 meta&lt;/p&gt;</description>
    </item>
    <item>
      <title>提高userscript开发效率的一些工具</title>
      <link>https://blog.trim21.me/posts/userscript%E5%BC%80%E5%8F%91/</link>
      <pubDate>Thu, 28 Jun 2018 04:29:21 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/userscript%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;这已经是旧文了, 见{% post_link webpack-userscript 使用webpack打包userscript %}&lt;/p&gt;&#xA;&lt;p&gt;最一开始写 userscript 的时候是在编辑器里修改后复制粘贴到&lt;code&gt;Tampermonkey&lt;/code&gt;中,后来觉得实在是太麻烦了,就搜了一下 Github 有没有什么现成的模板可以用.&lt;/p&gt;&#xA;&lt;p&gt;发现了这个&lt;a href=&#34;https://github.com/turboteddy/userscript-grunt-template&#34;&gt;turboteddy/userscript-grunt-template&lt;/a&gt;. 用了一下发现比原来效率高了不止一点. 就根据一些个人习惯稍微改了一下&lt;/p&gt;&#xA;&lt;p&gt;因为我用的用户脚本扩展是&lt;code&gt;Tampermonkey&lt;/code&gt;,所以下文中的&lt;code&gt;Tampermonkey&lt;/code&gt;也包括了其他的同类插件.&lt;/p&gt;&#xA;&lt;p&gt;我自己实际使用的代码在这里&lt;a href=&#34;https://github.com/Trim21/userscript-grunt-template&#34;&gt;Trim21/userscript-grunt-template&lt;/a&gt;, 下面的内容以这个 repo 为准&lt;/p&gt;&#xA;&lt;h2 id=&#34;最起码需要的几个功能&#34;&gt;最起码需要的几个功能&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;代码分块,不同类型的代码放在不同的文件中,比如要插入网页的 html 要放在&lt;code&gt;html&lt;/code&gt;文件中,样式对应的代码放在&lt;code&gt;css&lt;/code&gt;文件中,这样同时拥有了编辑器或者 IDE 的自动补全.&lt;/li&gt;&#xA;&lt;li&gt;LiveReload,即修改代码后自动刷新网页查看效果.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;分成几部分来说&lt;/p&gt;&#xA;&lt;p&gt;首先是代码分块, 这点用一个打包工具就可以做到了,比如我这里用到的是&lt;code&gt;Grunt&lt;/code&gt;,因为&lt;code&gt;Grunt&lt;/code&gt;有人已经写好了一个&lt;a href=&#34;https://github.com/Zod-/grunt-userscript-meta&#34;&gt;grunt-userscript-meta&lt;/a&gt;,用来直接生成 userscript 开头的 meta 信息, 那么自动补全的问题也随之解决了.&lt;/p&gt;&#xA;&lt;h3 id=&#34;开始&#34;&gt;开始&lt;/h3&gt;&#xA;&lt;p&gt;Grunt 的介绍我就不贴了 不了解的话也不会太影响使用 有兴趣的话可以看&lt;a href=&#34;https://javascript.ruanyifeng.com/tool/grunt.html&#34;&gt;阮一峰的 Grunt 介绍&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone git@github.com:Trim21/userscript-grunt-template.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd userscript-grunt-template&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm i&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm run dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更改&lt;code&gt;src/js/index.js&lt;/code&gt;中的内容,grunt 就会重新打包生成&lt;code&gt;dist/latest&lt;/code&gt;中 js 的内容&lt;/p&gt;&#xA;&lt;p&gt;所有的原文件都在&lt;code&gt;src&lt;/code&gt;文件夹中,&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;css&lt;/code&gt;要在对应的文件夹里.&lt;/p&gt;&#xA;&lt;p&gt;如果在 js 中想要引用对应的内容,要用到&lt;code&gt;/* @include ../html/page1.html */&lt;/code&gt;这样的语法.(基于&lt;a href=&#34;https://github.com/jsoverson/grunt-preprocess&#34;&gt;&lt;code&gt;grunt-preprocess&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;比如说要使用&lt;code&gt;GM_addStyle&lt;/code&gt;,但是字符串又太长, 就可以把对应的样式放在&lt;code&gt;css/page1.css&lt;/code&gt;,然后在 js 中这样写&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;GM_addStyle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/* @include ../css/page1.css */&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;css/page1.css&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>bash和zsh的自动补全</title>
      <link>https://blog.trim21.me/posts/bash-zsh-autocompltion/</link>
      <pubDate>Sat, 09 Dec 2017 09:58:46 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/bash-zsh-autocompltion/</guid>
      <description>&lt;p&gt;最近在给一个开源项目贡献代码,想要给他加上相应的自动补全功能&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BGmi/BGmi&#34;&gt;BGmi&lt;/a&gt;起初只是个 cli 程序,前端单纯的展示已经下载的剧集,后来给前端加了一些订阅功能,但是 cli 的使用频率还是很高,cli 没有自动补全功能总是说不过去,所以就花了一些时间加上了这个功能.&lt;/p&gt;&#xA;&lt;h2 id=&#34;分析一下需求&#34;&gt;分析一下需求&lt;/h2&gt;&#xA;&lt;p&gt;BGmi 的命令都是同样的结构,&lt;code&gt;bgmi action1 --opt1 arg1 --opt2 arg2&lt;/code&gt;,那么我们需要补全的就是所有的 action 和每个 action 相应的选项了.在此之前,是直接&lt;code&gt;add_parser&lt;/code&gt;和&lt;code&gt;add_argument&lt;/code&gt;相应的 action 和选项.这样是没法进行下一步的,所以首先花了一些时间,所以首先把所有的&lt;code&gt;action&lt;/code&gt;和相应的&lt;code&gt;opts&lt;/code&gt;存在了一个变量中&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;actions_and_arguments &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;: ACTION_ADD,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Subscribe bangumi.&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arguments&amp;#39;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;: dict(metavar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unicode_, nargs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bangumi name&amp;#39;&lt;/span&gt;), },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--episode&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;: dict(metavar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;episode&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Add bangumi and mark it as specified episode.&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;int), },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;: ACTION_DELETE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Unsubscribe bangumi.&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arguments&amp;#39;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;: dict(metavar&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, nargs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;, type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;unicode_,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bangumi name to unsubscribe.&amp;#39;&lt;/span&gt;), },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dest&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;--batch&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;: dict(action&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No confirmation.&amp;#39;&lt;/span&gt;), },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个&lt;code&gt;list&lt;/code&gt;中储存了多个&lt;code&gt;dict&lt;/code&gt;,每个&lt;code&gt;dict&lt;/code&gt;对应一个&lt;code&gt;action&lt;/code&gt;,每个&lt;code&gt;action&lt;/code&gt;的选项存在&lt;code&gt;arguments&lt;/code&gt;字段中.这里的命名可能有些混乱,写的时候没太注意.&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用hexo和GitHub pages服务搭建博客</title>
      <link>https://blog.trim21.me/posts/build-blog-whith-hexo-and-github-pages/</link>
      <pubDate>Sat, 16 Apr 2016 01:03:39 +0800</pubDate>
      <guid>https://blog.trim21.me/posts/build-blog-whith-hexo-and-github-pages/</guid>
      <description>&lt;p&gt;使用 GitHub actions 自动部属博客到 GitHub pages。&lt;/p&gt;&#xA;&lt;h2 id=&#34;github-pages-介绍&#34;&gt;GitHub Pages 介绍&lt;/h2&gt;&#xA;&lt;p&gt;github pages 是 github 提供的服务，github 会为特定仓库的默认分支（比如 &lt;code&gt;${username}.github.io&lt;/code&gt; ）或者其他仓库的 &lt;code&gt;gh-pages&lt;/code&gt; 分支提供静态文件服务。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;${username}.github.io&lt;/code&gt; 仓库的文件会直接放在 &lt;code&gt;${username}.github.io&lt;/code&gt; 域名的根目录下，其他的仓库则会放在&lt;code&gt;/${repo_name}/&lt;/code&gt; 子目录下。&lt;/p&gt;&#xA;&lt;p&gt;比如，我在 &lt;code&gt;blog&lt;/code&gt; 仓库下创建 &lt;code&gt;gh-pages&lt;/code&gt; 分支，在根目录创建一个 &lt;code&gt;index.html&lt;/code&gt; 文件。以我的用户名&lt;code&gt;trim21&lt;/code&gt;为例，访问 &lt;code&gt;https://trim21.github.io/blog/index.html&lt;/code&gt; 就可以正常看到文件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;github-actions&#34;&gt;GitHub Actions&lt;/h2&gt;&#xA;&lt;p&gt;2019 年 GitHub 上线了自己的 CI，&lt;a href=&#34;https://docs.github.com/cn/actions&#34;&gt;GitHub Actions&lt;/a&gt;，在此之前大家一般会使用 travis CI 或者 circle CI 等。但是直接用 github actions 可以避免额外注册账号，设置 github access token 等等权限问题。&lt;/p&gt;&#xA;&lt;p&gt;有了 github actions 之后就不再需要博客提供的各种部属插件了，只需要在 github actions 中构建博客，并且把生成的&lt;code&gt;public/&lt;/code&gt;文件夹推到&lt;code&gt;gh-pages&lt;/code&gt; 分支就可以了。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;main&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Setup node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/setup-node@v3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;node-version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;16&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;install&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;yarn&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;build&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;yarn build&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;publish_dir&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;commit_message&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploy ${{ github.ref }}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;cname&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;blog.trim21.me&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;github_token&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
